# [file name]: app.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø)
import streamlit as st
import sys
import os
import logging
import threading
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('SequencePredictorWeb')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_path)
sys.path.insert(0, os.path.join(project_path, 'model'))

st.set_page_config(page_title="AI –ü—Ä–æ–≥–Ω–æ–∑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π", page_icon="üî¢", layout="wide")

class WebInterface:
    def __init__(self):
        self.system = None
        self._init_system()
        self.progress_messages = []
        self.thread_result = None
        self.thread_error = None
        self.thread_complete = False
    
    def _init_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã...")
            from simple_system import SimpleNeuralSystem
            self.system = SimpleNeuralSystem()
            self.system.set_progress_callback(self._progress_callback)
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def _progress_callback(self, message):
        """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_messages.append(f"{datetime.now().strftime('%H:%M:%S')} - {message}")
        logger.info(f"üì¢ {message}")
    
    def _run_training_thread(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.thread_result = self.system.train(epochs=20)
            self.thread_error = None
        except Exception as e:
            self.thread_result = None
            self.thread_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
        finally:
            self.thread_complete = True
    
    def _run_prediction_thread(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.thread_result = self.system.predict()
            self.thread_error = None
        except Exception as e:
            self.thread_result = None
            self.thread_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        finally:
            self.thread_complete = True
    
    def _run_add_data_thread(self, sequence_input):
        """–ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.thread_result = self.system.add_data_and_retrain(sequence_input)
            self.thread_error = None
        except Exception as e:
            self.thread_result = None
            self.thread_error = str(e)
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            self.thread_complete = True
    
    def show_progress_with_timeout(self, operation_name, timeout_seconds=600):
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        progress_placeholder = st.empty()
        messages_placeholder = st.empty()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.thread_result = None
        self.thread_error = None
        self.thread_complete = False
        self.progress_messages.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
        if operation_name == "training":
            thread = threading.Thread(target=self._run_training_thread)
        elif operation_name == "prediction":
            thread = threading.Thread(target=self._run_prediction_thread)
        elif operation_name == "add_data":
            thread = threading.Thread(target=lambda: self._run_add_data_thread(st.session_state.get('current_sequence', '')))
        else:
            st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            return None
        
        thread.daemon = True
        thread.start()
        
        start_time = time.time()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        with progress_placeholder.container():
            st.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_name}")
            progress_bar = st.progress(0)
            status_text = st.empty()
            time_text = st.empty()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫–∞ –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
            while thread.is_alive():
                elapsed = time.time() - start_time
                if elapsed > timeout_seconds:
                    status_text.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏!")
                    self.thread_error = "–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏"
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_percent = min(95, int((elapsed / timeout_seconds) * 100))
                progress_bar.progress(progress_percent)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.progress_messages:
                    recent_messages = self.progress_messages[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    status_text.text("\n".join(recent_messages))
                
                time_text.text(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)} —Å–µ–∫.")
                time.sleep(0.5)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if self.thread_complete and not self.thread_error:
                progress_bar.progress(100)
                status_text.success("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            elif self.thread_error:
                progress_bar.progress(100)
                status_text.error(f"‚ùå –û—à–∏–±–∫–∞: {self.thread_error}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        thread.join(timeout=5)
        
        return self.thread_result
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        st.sidebar.header("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        if self.system:
            try:
                status = self.system.get_status()
                st.sidebar.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ AI: –ê–∫—Ç–∏–≤–Ω–∞")
                st.sidebar.info(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {'–î–∞' if status['is_trained'] else '–ù–µ—Ç'}")
                st.sidebar.info(f"–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {status['dataset_size']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
                learning_stats = status.get('learning_stats', {})
                if isinstance(learning_stats, dict) and 'recent_accuracy_avg' in learning_stats:
                    accuracy = learning_stats['recent_accuracy_avg']
                    st.sidebar.info(f"üìä –°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
                try:
                    from data_loader import load_dataset
                    dataset = load_dataset()
                    if dataset:
                        last_group = dataset[-1] if dataset else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                        st.sidebar.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞: {last_group}")
                except Exception as e:
                    st.sidebar.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
                
            except Exception as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        else:
            st.sidebar.error("‚ùå –°–∏—Å—Ç–µ–º–∞ AI: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def show_advanced_controls(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã"""
        st.sidebar.header("üîß –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω—Å–∞–º–±–ª–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É"):
            try:
                if hasattr(self.system, '_update_full_ensemble'):
                    self.system._update_full_ensemble()
                    st.sidebar.success("‚úÖ –ê–Ω—Å–∞–º–±–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                else:
                    st.sidebar.warning("‚ö†Ô∏è  –ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–Ω—Å–∞–º–±–ª—è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if hasattr(self.system, 'ensemble_enabled'):
            current_mode = getattr(self.system, 'ensemble_enabled', True)
            new_mode = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–π —Ä–µ–∂–∏–º", value=current_mode)
            if new_mode != current_mode:
                try:
                    self.system.toggle_ensemble(new_mode)
                    st.sidebar.success(f"üîß –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π —Ä–µ–∂–∏–º {'–≤–∫–ª—é—á–µ–Ω' if new_mode else '–≤—ã–∫–ª—é—á–µ–Ω'}")
                except Exception as e:
                    st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
        if st.sidebar.button("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"):
            try:
                if hasattr(self.system, 'reset_learning_data'):
                    self.system.reset_learning_data()
                    st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã!")
                else:
                    st.sidebar.warning("‚ö†Ô∏è  –ú–µ—Ç–æ–¥ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            except Exception as e:
                st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def show_learning_analytics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è"""
        st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
        
        try:
            if hasattr(self.system, 'get_learning_insights'):
                insights = self.system.get_learning_insights()
                
                if isinstance(insights, dict):
                    if 'message' in insights:
                        st.info(insights['message'])
                    else:
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                        col1, col2, col3 = st.columns(3)
                        
                        with col1:
                            st.metric(
                                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π",
                                insights.get('total_predictions_analyzed', 0)
                            )
                        
                        with col2:
                            accuracy = insights.get('recent_accuracy_avg', 0)
                            st.metric(
                                "–°—Ä–µ–¥–Ω—è—è —Ç–æ—á–Ω–æ—Å—Ç—å",
                                f"{accuracy:.1%}"
                            )
                        
                        with col3:
                            best_acc = insights.get('best_accuracy', 0)
                            st.metric(
                                "–õ—É—á—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å",
                                f"{best_acc:.1%}"
                            )
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        recommendations = insights.get('recommendations', [])
                        if recommendations:
                            st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é")
                            for rec in recommendations:
                                st.write(f"‚Ä¢ {rec}")
                        else:
                            st.info("üìä –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            else:
                st.warning("‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")

    def show_sequences(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
        self.show_learning_analytics()
        st.markdown("---")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ –∫—ç—à–∞
        try:
            from data_loader import load_predictions
            predictions = load_predictions()
            if predictions:
                st.subheader("üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ –∫—ç—à–∞")
                cols = st.columns(2)
                for i, (group, score) in enumerate(predictions[:4], 1):
                    with cols[(i-1) % 2]:
                        confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                        st.metric(
                            f"–ü—Ä–æ–≥–Ω–æ–∑ {i}",
                            f"{group[0]} {group[1]} {group[2]} {group[3]}",
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.6f}"
                        )
            else:
                st.info("üìù –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ –∫—ç—à–µ")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        try:
            from data_loader import load_dataset
            dataset = load_dataset()
            
            if dataset:
                st.success(f"–í—Å–µ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(dataset)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:")
                for i, seq in enumerate(dataset[-5:], 1):
                    st.text_area(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {len(dataset)-5+i}", seq, height=60, key=f"seq_{i}")
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def _run_in_thread(self, func, *args, **kwargs):
        """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        import threading
        
        def wrapper():
            try:
                self.result = func(*args, **kwargs)
                self.thread_success = True
            except Exception as e:
                self.thread_error = e
                self.thread_success = False
        
        self.thread_success = None
        self.thread_error = None
        self.result = None
        
        thread = threading.Thread(target=wrapper)
        thread.daemon = True
        thread.start()
        
        return thread

    def train_model(self):
        """–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"""
        st.header("üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å AI")
        st.info("–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        if st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary", key="train_model_btn"):
            with st.spinner("–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è..."):
                result = self.show_progress_with_timeout("training", timeout_seconds=600)  # 10 –º–∏–Ω—É—Ç
            
            if self.thread_error:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {self.thread_error}")
            elif result:
                st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
                for i, (group, score) in enumerate(result, 1):
                    confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                    st.write(f"{i}. `{group[0]} {group[1]} {group[2]} {group[3]}` (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.6f}) {confidence}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                try:
                    from data_loader import save_predictions
                    save_predictions(result)
                    st.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
            else:
                st.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

    def make_prediction(self):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
        st.header("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã")
        st.info("AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", type="primary", key="predict_btn"):
            with st.spinner("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è..."):
                result = self.show_progress_with_timeout("prediction", timeout_seconds=300)  # 5 –º–∏–Ω—É—Ç
            
            if self.thread_error:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {self.thread_error}")
            elif result:
                st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                st.subheader("–¢–æ–ø –ø—Ä–æ–≥–Ω–æ–∑—ã:")
                
                cols = st.columns(2)
                for i, (group, score) in enumerate(result):
                    with cols[i % 2]:
                        confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                        st.metric(
                            f"–ü—Ä–æ–≥–Ω–æ–∑ {i+1}",
                            f"{group[0]} {group[1]} {group[2]} {group[3]}",
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.4f}"
                        )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                try:
                    from data_loader import save_predictions
                    save_predictions(result)
                    st.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
            else:
                st.warning("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def add_sequence(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        try:
            from data_loader import load_dataset
            dataset = load_dataset()
            if dataset:
                st.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: **{dataset[-1]}**")
        except:
            pass
        
        st.info("–í–≤–µ–¥–∏—Ç–µ 4 —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 9 22 19')")
        
        sequence_input = st.text_input("–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", placeholder="1 2 3 4", key="sequence_input")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–æ–±—É—á–∏—Ç—å", type="primary", key="add_sequence_btn"):
            if not sequence_input:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                return
                
            try:
                from data_loader import validate_group, compare_groups, load_predictions
                
                if not validate_group(sequence_input):
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∏—Å–ª–∞ 1-26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ session state
                st.session_state.current_sequence = sequence_input
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
                sequence_numbers = [int(x) for x in sequence_input.strip().split()]
                sequence_tuple = tuple(sequence_numbers)
                previous_predictions = load_predictions()
                
                if previous_predictions:
                    matches_found = []
                    for pred_group, score in previous_predictions:
                        comparison = compare_groups(pred_group, sequence_tuple)
                        if comparison['total_matches'] > 0:
                            matches_found.append((pred_group, comparison))
                    
                    if matches_found:
                        st.success(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å {len(matches_found)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏:")
                        for i, (pred_group, comparison) in enumerate(matches_found[:3], 1):
                            st.write(f"  {i}) –ü—Ä–æ–≥–Ω–æ–∑: {pred_group[0]} {pred_group[1]} {pred_group[2]} {pred_group[3]}")
                            st.write(f"     –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º: {comparison['total_matches']}/4")
                            st.write(f"     –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {comparison['exact_matches']}/4")
                    else:
                        st.info("üìù –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–µ—Ç")
                else:
                    st.info("üìù –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                with st.spinner("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö..."):
                    result = self.show_progress_with_timeout("add_data", timeout_seconds=300)  # 5 –º–∏–Ω—É—Ç
                
                if self.thread_error:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {self.thread_error}")
                elif result:
                    st.success("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –º–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                    try:
                        from data_loader import save_predictions
                        save_predictions(result)
                        st.info("üíæ –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
                    st.subheader("üéØ –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ—Å–ª–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è")
                    for i, (group, score) in enumerate(result, 1):
                        confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                        st.write(f"{i}. `{group[0]} {group[1]} {group[2]} {group[3]}` (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.6f}) {confidence}")
                else:
                    st.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def main():
    st.title("üî¢ AI –ü—Ä–æ–≥–Ω–æ–∑ –ß–∏—Å–ª–æ–≤—ã—Ö –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    st.write("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å —Å–∏—Å—Ç–µ–º–æ–π —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    interface = WebInterface()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ–Ω—é
    interface.show_status()
    interface.show_advanced_controls()
    
    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    menu_option = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã"]
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if menu_option == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
        interface.show_sequences()
    elif menu_option == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
        interface.add_sequence()
    elif menu_option == "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å":
        interface.train_model()
    elif menu_option == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã":
        interface.make_prediction()

if __name__ == "__main__":
    main()