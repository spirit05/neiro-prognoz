import streamlit as st
import sys
import os
import json
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
sys.path.append('model')

st.set_page_config(
    page_title="AI –ü—Ä–æ–≥–Ω–æ–∑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π",
    page_icon="üî¢", 
    layout="wide"
)

class WebInterface:
    def __init__(self):
        self.system = None
        self._init_system()
    
    def _init_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            from simple_system import SimpleNeuralSystem
            self.system = SimpleNeuralSystem()
            return True
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        st.sidebar.header("–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        if self.system:
            status = self.system.get_status()
            st.sidebar.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ AI: –ê–∫—Ç–∏–≤–Ω–∞")
            st.sidebar.info(f"–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {'–î–∞' if status['is_trained'] else '–ù–µ—Ç'}")
            st.sidebar.info(f"–†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {status['dataset_size']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
            try:
                from data_loader import load_dataset
                dataset = load_dataset()
                if dataset:
                    last_group = dataset[-1] if dataset else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                    st.sidebar.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞: {last_group}")
            except:
                pass
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
            try:
                from data_loader import load_predictions
                predictions = load_predictions()
                if predictions:
                    st.sidebar.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã: {len(predictions)}")
                    for i, (group, score) in enumerate(predictions[:2], 1):
                        st.sidebar.text(f"  {i}. {group[0]} {group[1]} {group[2]} {group[3]}")
            except:
                pass
        else:
            st.sidebar.error("‚ùå –°–∏—Å—Ç–µ–ºa AI: –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def show_sequences(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        try:
            from data_loader import load_predictions
            predictions = load_predictions()
            if predictions:
                st.subheader("üéØ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –∏–∑ –∫—ç—à–∞")
                cols = st.columns(2)
                for i, (group, score) in enumerate(predictions[:4], 1):
                    with cols[(i-1) % 2]:
                        confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                        st.metric(
                            f"–ü—Ä–æ–≥–Ω–æ–∑ {i}",
                            f"{group[0]} {group[1]} {group[2]} {group[3]}",
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.6f}"
                        )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
        
        try:
            from data_loader import load_dataset
            dataset = load_dataset()
            
            if dataset:
                st.success(f"–í—Å–µ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {len(dataset)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                st.subheader("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π:")
                for i, seq in enumerate(dataset[-5:], 1):
                    st.text_area(f"–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å {len(dataset)-5+i}", seq, height=60)
            else:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def add_sequence(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        try:
            from data_loader import load_dataset
            dataset = load_dataset()
            if dataset:
                st.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞: **{dataset[-1]}**")
        except:
            pass
        
        st.info("–í–≤–µ–¥–∏—Ç–µ 4 —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: '1 9 22 19')")
        
        sequence_input = st.text_input("–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", placeholder="1 2 3 4")
        
        if st.button("–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –¥–æ–æ–±—É—á–∏—Ç—å", type="primary"):
            if not sequence_input:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                return
                
            try:
                from data_loader import validate_group, compare_groups, load_predictions, save_predictions
                
                if validate_group(sequence_input):
                    # === 1. –°–†–ê–í–ù–ï–ù–ò–ï –° –ü–†–ï–î–´–î–£–©–ò–ú–ò –ü–†–û–ì–ù–û–ó–ê–ú–ò ===
                    sequence_numbers = [int(x) for x in sequence_input.strip().split()]
                    sequence_tuple = tuple(sequence_numbers)
                    
                    previous_predictions = load_predictions()
                    if previous_predictions:
                        matches_found = []
                        for pred_group, score in previous_predictions:
                            comparison = compare_groups(pred_group, sequence_tuple)
                            if comparison['total_matches'] > 0:
                                matches_found.append((pred_group, comparison))
                        
                        if matches_found:
                            st.success(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å {len(matches_found)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏:")
                            for i, (pred_group, comparison) in enumerate(matches_found[:3], 1):
                                st.write(f"  {i}) –ü—Ä–æ–≥–Ω–æ–∑: {pred_group[0]} {pred_group[1]} {pred_group[2]} {pred_group[3]}")
                                st.write(f"     –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º: {comparison['total_matches']}/4")
                                st.write(f"     –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {comparison['exact_matches']}/4")
                        else:
                            st.info("üìù –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–µ—Ç")
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    progress_container = st.empty()
                    dynamic_output = st.empty()
                    
                    # –õ–æ–∞–¥–µ—Ä —Å–≤–µ—Ä—Ö—É
                    with progress_container:
                        st.info("üîÑ –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å...")
                    
                    # Callback –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                    def progress_callback(message):
                        dynamic_output.text(f"‚ñ∂Ô∏è {message}")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –≤ —Å–∏—Å—Ç–µ–º—É
                    self.system.set_progress_callback(progress_callback)
                    
                    # === 2. –†–ï–ê–õ–¨–ù–û–ï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ò –û–ë–£–ß–ï–ù–ò–ï ===
                    predictions = self.system.add_data_and_retrain(sequence_input)
                    
                    # === 3. –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–û–í–´–• –ü–†–û–ì–ù–û–ó–û–í ===
                    if predictions:
                        save_predictions(predictions)
                        dynamic_output.text("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –≤ –∫—ç—à...")
                    
                    # –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    dynamic_output.empty()
                    progress_container.empty()
                    
                    st.success("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –º–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞!")
                    
                    # === 4. –ü–û–ö–ê–ó –ù–û–í–´–• –ü–†–û–ì–ù–û–ó–û–í ===
                    if predictions:
                        st.subheader("üéØ –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ—Å–ª–µ –¥–æ–æ–±—É—á–µ–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à)")
                        for i, (group, score) in enumerate(predictions, 1):
                            confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                            st.write(f"{i}. `{group[0]} {group[1]} {group[2]} {group[3]}` (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.6f}) {confidence}")
                        
                        st.info("üíæ –≠—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
                    else:
                        st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
                else:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∏—Å–ª–∞ 1-26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞: {e}")
    
    def train_model(self):
        """–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"""
        st.header("üß† –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å AI")
        st.info("–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        if st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", type="primary"):
            try:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                progress_container = st.empty()
                dynamic_output = st.empty()
                
                # –õ–æ–∞–¥–µ—Ä —Å–≤–µ—Ä—Ö—É
                with progress_container:
                    st.info("üîÑ –ò–¥–µ—Ç –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                
                # Callback –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                def progress_callback(message):
                    dynamic_output.text(f"‚ñ∂Ô∏è {message}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –≤ —Å–∏—Å—Ç–µ–º—É
                self.system.set_progress_callback(progress_callback)
                
                # –†–µ–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
                predictions = self.system.train(epochs=15)
                
                # –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                dynamic_output.empty()
                progress_container.empty()
                
                st.success("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                if predictions:
                    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
                    for i, (group, score) in enumerate(predictions, 1):
                        confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                        st.write(f"{i}. `{group[0]} {group[1]} {group[2]} {group[3]}` (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.6f})")
                        
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def make_prediction(self):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
        st.header("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã")
        st.info("AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", type="primary"):
            try:
                with st.spinner("AI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã..."):
                    predictions = self.system.predict()
                
                if predictions:
                    st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(predictions)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                    
                    st.subheader("–¢–æ–ø –ø—Ä–æ–≥–Ω–æ–∑—ã:")
                    for i, (group, score) in enumerate(predictions, 1):
                        confidence = "üü¢ –í—ã—Å–æ–∫–∞—è" if score > 0.01 else "üü° –°—Ä–µ–¥–Ω—è—è" if score > 0.001 else "üî¥ –ù–∏–∑–∫–∞—è"
                        st.metric(
                            f"–ü—Ä–æ–≥–Ω–æ–∑ {i}",
                            f"{group[0]} {group[1]} {group[2]} {group[3]}",
                            f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}"
                        )
                else:
                    st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    st.title("üî¢ AI –ü—Ä–æ–≥–Ω–æ–∑ –ß–∏—Å–ª–æ–≤—ã—Ö –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    st.write("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    interface = WebInterface()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ–Ω—é
    interface.show_status()
    
    st.sidebar.header("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    menu_option = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã"]
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if menu_option == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
        interface.show_sequences()
    elif menu_option == "–î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å":
        interface.add_sequence()
    elif menu_option == "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å":
        interface.train_model()
    elif menu_option == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã":
        interface.make_prediction()

if __name__ == "__main__":
    main()