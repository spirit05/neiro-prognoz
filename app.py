# [file name]: app.py (–ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import streamlit as st
import sys
import os
import logging
import threading
import time
import uuid
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('SequencePredictorWeb')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_path)
sys.path.insert(0, os.path.join(project_path, 'model'))

st.set_page_config(page_title="AI –ü—Ä–æ–≥–Ω–æ–∑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π", page_icon="üî¢", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'system_initialized' not in st.session_state:
    st.session_state.system_initialized = False
if 'system' not in st.session_state:
    st.session_state.system = None
if 'progress_messages' not in st.session_state:
    st.session_state.progress_messages = []
if 'operation_running' not in st.session_state:
    st.session_state.operation_running = False
if 'operation_result' not in st.session_state:
    st.session_state.operation_result = None
if 'operation_error' not in st.session_state:
    st.session_state.operation_error = None
if 'session_id' not in st.session_state:
    st.session_state.session_id = str(uuid.uuid4())[:8]

def init_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    if st.session_state.system_initialized and st.session_state.system:
        return True
        
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã...")
        from simple_system import SimpleNeuralSystem
        st.session_state.system = SimpleNeuralSystem()
        st.session_state.system.set_progress_callback(progress_callback)
        st.session_state.system_initialized = True
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def progress_callback(message):
    """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    timestamp = datetime.now().strftime('%H:%M:%S')
    formatted_message = f"{timestamp} - {message}"
    st.session_state.progress_messages.append(formatted_message)
    logger.info(f"üì¢ {message}")

def run_operation(operation_type, **kwargs):
    """–ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        if operation_type == "training":
            logger.info("üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è")
            result = st.session_state.system.train(epochs=15)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        elif operation_type == "prediction":
            logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            result = st.session_state.system.predict(top_k=8)
            logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ {len(result) if result else 0} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            
        elif operation_type == "add_data":
            sequence_input = kwargs.get('sequence_input', '')
            logger.info("üéØ –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            result = st.session_state.system.add_data_and_retrain(sequence_input, retrain_epochs=3)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ {len(result) if result else 0} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_type}")
        
        st.session_state.operation_result = result
        st.session_state.operation_error = None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ {operation_type}: {e}")
        st.session_state.operation_result = None
        st.session_state.operation_error = str(e)
    
    finally:
        st.session_state.operation_running = False

def show_progress_ui(operation_name, timeout_seconds=1200):
    """–ü–æ–∫–∞–∑ UI –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    progress_placeholder = st.empty()
    messages_placeholder = st.empty()
    
    start_time = time.time()
    operation_id = f"{operation_name}_{int(time.time())}"
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    st.session_state.progress_messages.clear()
    
    with progress_placeholder.container():
        st.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_name}")
        progress_bar = st.progress(0, key=f"progress_{operation_id}")
        status_text = st.empty()
        time_text = st.empty()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
        while st.session_state.operation_running:
            elapsed = time.time() - start_time
            if elapsed > timeout_seconds:
                status_text.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏!")
                st.session_state.operation_error = f"–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ ({timeout_seconds} —Å–µ–∫.)"
                st.session_state.operation_running = False
                break
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            progress_percent = min(95, int((elapsed / timeout_seconds) * 100))
            progress_bar.progress(progress_percent)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            if st.session_state.progress_messages:
                recent_messages = st.session_state.progress_messages[-5:]
                messages_placeholder.text_area(
                    "üìù –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", 
                    "\n".join(recent_messages), 
                    height=150,
                    key=f"messages_{operation_id}"
                )
            
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
            if elapsed < 60:
                status_text.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞...")
            elif elapsed < 180:
                status_text.info("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
            elif elapsed < 300:
                status_text.info("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            else:
                status_text.info("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è...")
            
            time_text.text(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)} —Å–µ–∫.")
            time.sleep(1)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if not st.session_state.operation_running:
            progress_bar.progress(100)
            if st.session_state.operation_error:
                status_text.error(f"‚ùå {st.session_state.operation_error}")
            else:
                status_text.success("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                time_text.text(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(time.time() - start_time)} —Å–µ–∫.")

def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    st.sidebar.header("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    if st.session_state.system_initialized and st.session_state.system:
        try:
            status = st.session_state.system.get_status()
            
            if status['is_trained']:
                st.sidebar.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
            else:
                st.sidebar.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
            
            st.sidebar.info(f"üìÅ –ì—Ä—É–ø–ø –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {status['dataset_size']}")
            
            if status['has_sufficient_data']:
                st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
            else:
                st.sidebar.warning(f"‚ö†Ô∏è –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 50, —Å–µ–π—á–∞—Å {status['dataset_size']})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
            try:
                from data_loader import load_dataset
                dataset = load_dataset()
                if dataset:
                    last_group = dataset[-1]
                    st.sidebar.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞: {last_group}")
            except:
                pass
                
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
    else:
        st.sidebar.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

def show_advanced_controls():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã"""
    st.sidebar.header("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
    
    if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
        st.rerun()
    
    if st.sidebar.button("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å"):
        try:
            if st.session_state.system:
                status = st.session_state.system.get_status()
                st.sidebar.json(status, expanded=False)
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

def train_model():
    """–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"""
    st.header("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ AI")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.info("""
        **–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:**
        - –ê–Ω–∞–ª–∏–∑ 9000+ –≥—Ä—É–ø–ø —á–∏—Å–µ–ª
        - –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        - **–í—Ä–µ–º—è: 15-20 –º–∏–Ω—É—Ç**
        """)
    
    with col2:
        st.warning("""
        **‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:**
        –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è!
        """)
    
    # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    if st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", type="primary", key="train_btn"):
        if not st.session_state.system_initialized:
            st.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        st.session_state.operation_running = True
        thread = threading.Thread(target=run_operation, args=("training",))
        thread.daemon = True
        thread.start()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        show_progress_ui("–æ–±—É—á–µ–Ω–∏–µ", timeout_seconds=1200)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if st.session_state.operation_error:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {st.session_state.operation_error}")
        elif st.session_state.operation_result:
            st.balloons()
            st.success("üéâ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            
            st.subheader("üéØ –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
            for i, (group, score) in enumerate(st.session_state.operation_result[:6], 1):
                confidence = "üü¢ –í–´–°–û–ö–ê–Ø" if score > 0.01 else "üü° –°–†–ï–î–ù–Ø–Ø" if score > 0.001 else "üî¥ –ù–ò–ó–ö–ê–Ø"
                st.write(f"**{i}.** `{group[0]} {group[1]} {group[2]} {group[3]}`")
                st.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: `{score:.6f}` {confidence}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
            try:
                from data_loader import save_predictions
                save_predictions(st.session_state.operation_result)
                st.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
        else:
            st.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

def make_prediction():
    """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
    st.header("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã")
    
    st.info("""
    **AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã:**
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    - –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    - **–í—Ä–µ–º—è: 2-5 –º–∏–Ω—É—Ç**
    """)
    
    # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.button("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", type="primary", key="predict_btn"):
        if not st.session_state.system_initialized:
            st.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞
        status = st.session_state.system.get_status()
        if not status['is_trained']:
            st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        st.session_state.operation_running = True
        thread = threading.Thread(target=run_operation, args=("prediction",))
        thread.daemon = True
        thread.start()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        show_progress_ui("–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", timeout_seconds=300)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if st.session_state.operation_error:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {st.session_state.operation_error}")
        elif st.session_state.operation_result:
            st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(st.session_state.operation_result)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            
            st.subheader("üèÜ –¢–æ–ø –ø—Ä–æ–≥–Ω–æ–∑—ã")
            cols = st.columns(2)
            
            for i, (group, score) in enumerate(st.session_state.operation_result):
                with cols[i % 2]:
                    confidence = "üü¢ –í–´–°–û–ö–ê–Ø" if score > 0.01 else "üü° –°–†–ï–î–ù–Ø–Ø" if score > 0.001 else "üî¥ –ù–ò–ó–ö–ê–Ø"
                    
                    st.metric(
                        label=f"–ü—Ä–æ–≥–Ω–æ–∑ #{i+1}",
                        value=f"{group[0]} {group[1]} {group[2]} {group[3]}",
                        delta=f"{score:.4f}"
                    )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
            try:
                from data_loader import save_predictions
                save_predictions(st.session_state.operation_result)
                st.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
        else:
            st.warning("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def add_sequence():
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    try:
        from data_loader import load_dataset
        dataset = load_dataset()
        if dataset:
            st.info(f"üìã **–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:** `{dataset[-1]}`")
    except:
        pass
    
    st.info("""
    **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —Å –¥–æ–æ–±—É—á–µ–Ω–∏–µ–º:**
    - –í–≤–µ–¥–∏—Ç–µ 4 —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
    - –°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–∏—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    - –í—ã–ø–æ–ª–Ω–∏—Ç –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    - **–í—Ä–µ–º—è: 3-7 –º–∏–Ω—É—Ç**
    """)
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    sequence_input = st.text_input(
        "–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
        placeholder="1 9 22 19",
        key="sequence_input",
        help="–ü—Ä–∏–º–µ—Ä: 1 9 22 19 - 4 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –æ—Ç 1 –¥–æ 26"
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏ –¥–æ–æ–±—É—á–∏—Ç—å", type="primary", key="add_btn"):
        if not st.session_state.system_initialized:
            st.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
            
        if not sequence_input:
            st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            return
            
        try:
            from data_loader import validate_group, compare_groups, load_predictions
            
            if not validate_group(sequence_input):
                st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∏—Å–ª–∞ 1-26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
                return
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
            sequence_numbers = [int(x) for x in sequence_input.strip().split()]
            sequence_tuple = tuple(sequence_numbers)
            previous_predictions = load_predictions()
            
            if previous_predictions:
                matches_found = []
                for pred_group, score in previous_predictions:
                    comparison = compare_groups(pred_group, sequence_tuple)
                    if comparison['total_matches'] > 0:
                        matches_found.append((pred_group, comparison))
                
                if matches_found:
                    st.success(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å {len(matches_found)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏:")
                    for i, (pred_group, comparison) in enumerate(matches_found[:3], 1):
                        st.write(f"**{i}.** –ü—Ä–æ–≥–Ω–æ–∑: `{pred_group[0]} {pred_group[1]} {pred_group[2]} {pred_group[3]}`")
                        st.write(f"   - –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º: **{comparison['total_matches']}/4**")
                else:
                    st.info("üìù –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–µ—Ç")
            else:
                st.info("üìù –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            
            st.markdown("---")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            st.session_state.operation_running = True
            thread = threading.Thread(target=run_operation, args=("add_data",), kwargs={'sequence_input': sequence_input})
            thread.daemon = True
            thread.start()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            show_progress_ui("–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", timeout_seconds=420)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if st.session_state.operation_error:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {st.session_state.operation_error}")
            elif st.session_state.operation_result:
                st.balloons()
                st.success("üéâ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –º–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞!")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                try:
                    from data_loader import save_predictions
                    save_predictions(st.session_state.operation_result)
                    st.info("üíæ –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
                st.subheader("üéØ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
                for i, (group, score) in enumerate(st.session_state.operation_result[:8], 1):
                    confidence = "üü¢ –í–´–°–û–ö–ê–Ø" if score > 0.01 else "üü° –°–†–ï–î–ù–Ø–Ø" if score > 0.001 else "üî¥ –ù–ò–ó–ö–ê–Ø"
                    st.write(f"**{i}.** `{group[0]} {group[1]} {group[2]} {group[3]}`")
                    st.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: `{score:.6f}` {confidence}")
            else:
                st.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    st.title("üî¢ AI –ü—Ä–æ–≥–Ω–æ–∑ –ß–∏—Å–ª–æ–≤—ã—Ö –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    st.markdown("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å **—Å–∏—Å—Ç–µ–º–æ–π —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è**")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    if not st.session_state.system_initialized:
        with st.spinner("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã..."):
            init_system()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ–Ω—é
    show_status()
    show_advanced_controls()
    
    st.sidebar.markdown("---")
    st.sidebar.header("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    menu_option = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"],
        key="main_menu"
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if menu_option == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        st.info("üìà –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
    elif menu_option == "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å":
        train_model()
    elif menu_option == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã":
        make_prediction()
    elif menu_option == "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É":
        add_sequence()

if __name__ == "__main__":
    main()