# [file name]: app.py (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
import streamlit as st
import sys
import os
import logging
import threading
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('SequencePredictorWeb')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏
project_path = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_path)
sys.path.insert(0, os.path.join(project_path, 'model'))

st.set_page_config(page_title="AI –ü—Ä–æ–≥–Ω–æ–∑ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π", page_icon="üî¢", layout="wide")

class WebInterface:
    def __init__(self):
        self.system = None
        self._init_system()
        self.progress_messages = []
        self.thread_result = None
        self.thread_error = None
        self.thread_complete = False
    
    def _init_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã...")
            from simple_system import SimpleNeuralSystem
            self.system = SimpleNeuralSystem()
            self.system.set_progress_callback(self._progress_callback)
            logger.info("‚úÖ –°–∏—Å—Ç–µ–ºa AI —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            status = self.system.get_status()
            st.sidebar.info(f"üìä –î–∞—Ç–∞—Å–µ—Ç: {status['dataset_size']} –≥—Ä—É–ø–ø")
            st.sidebar.info(f"üß† –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {'‚úÖ –î–∞' if status['is_trained'] else '‚ùå –ù–µ—Ç'}")
            
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    def _progress_callback(self, message):
        """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        formatted_message = f"{timestamp} - {message}"
        self.progress_messages.append(formatted_message)
        logger.info(f"üì¢ {message}")
    
    def _run_training_thread(self, epochs=15):  # –£–º–µ–Ω—å—à–∏–ª–∏ —ç–ø–æ—Ö–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {epochs} —ç–ø–æ—Ö")
            self.thread_result = self.system.train(epochs=epochs)
            logger.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.thread_error = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –æ–±—É—á–µ–Ω–∏—è: {e}")
            self.thread_result = None
            self.thread_error = str(e)
        finally:
            self.thread_complete = True
    
    def _run_prediction_thread(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info("üéØ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.thread_result = self.system.predict(top_k=8)  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            logger.info(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ {len(self.thread_result) if self.thread_result else 0} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            self.thread_error = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            self.thread_result = None
            self.thread_error = str(e)
        finally:
            self.thread_complete = True
    
    def _run_add_data_thread(self, sequence_input):
        """–ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            logger.info("üéØ –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
            self.thread_result = self.system.add_data_and_retrain(sequence_input, retrain_epochs=3)  # –ú–µ–Ω—å—à–µ —ç–ø–æ—Ö –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –ø–æ–ª—É—á–µ–Ω–æ {len(self.thread_result) if self.thread_result else 0} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            self.thread_error = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.thread_result = None
            self.thread_error = str(e)
        finally:
            self.thread_complete = True
    
    def show_progress_with_timeout(self, operation_name, timeout_seconds=1200):  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 20 –º–∏–Ω—É—Ç
        """–ü–æ–∫–∞–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        progress_placeholder = st.empty()
        messages_placeholder = st.empty()
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.thread_result = None
        self.thread_error = None
        self.thread_complete = False
        self.progress_messages.clear()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ç–æ–∫
        if operation_name == "training":
            thread = threading.Thread(target=self._run_training_thread)
            estimated_time = "15-20 –º–∏–Ω—É—Ç"
        elif operation_name == "prediction":
            thread = threading.Thread(target=self._run_prediction_thread)
            estimated_time = "2-5 –º–∏–Ω—É—Ç"
        elif operation_name == "add_data":
            thread = threading.Thread(target=lambda: self._run_add_data_thread(st.session_state.get('current_sequence', '')))
            estimated_time = "3-7 –º–∏–Ω—É—Ç"
        else:
            st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            return None
        
        thread.daemon = True
        thread.start()
        
        start_time = time.time()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        with progress_placeholder.container():
            st.info(f"üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: {operation_name} (–æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {estimated_time})")
            progress_bar = st.progress(0)
            status_text = st.empty()
            time_text = st.empty()
            messages_text = st.empty()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫–∞ –ø–æ—Ç–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
            while thread.is_alive():
                elapsed = time.time() - start_time
                if elapsed > timeout_seconds:
                    status_text.error("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.")
                    self.thread_error = f"–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ ({timeout_seconds} —Å–µ–∫.)"
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
                progress_percent = min(95, int((elapsed / timeout_seconds) * 100))
                progress_bar.progress(progress_percent)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.progress_messages:
                    recent_messages = self.progress_messages[-5:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                    messages_text.text_area("üìù –•–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", "\n".join(recent_messages), height=150)
                
                # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
                if elapsed < 60:
                    status_text.info("‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞...")
                elif elapsed < 180:
                    status_text.info("üîç –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
                elif elapsed < 300:
                    status_text.info("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
                else:
                    status_text.info("üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è...")
                
                time_text.text(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {int(elapsed)} —Å–µ–∫. / –õ–∏–º–∏—Ç: {timeout_seconds} —Å–µ–∫.")
                time.sleep(1)  # –£–≤–µ–ª–∏—á–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if self.thread_complete and not self.thread_error:
                progress_bar.progress(100)
                status_text.success("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                time_text.text(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {int(time.time() - start_time)} —Å–µ–∫.")
            elif self.thread_error:
                progress_bar.progress(100)
                status_text.error(f"‚ùå {self.thread_error}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        thread.join(timeout=10)
        
        return self.thread_result

    def show_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        st.sidebar.header("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        if self.system:
            try:
                status = self.system.get_status()
                
                if status['is_trained']:
                    st.sidebar.success("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
                else:
                    st.sidebar.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
                
                st.sidebar.info(f"üìÅ –ì—Ä—É–ø–ø –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: {status['dataset_size']}")
                
                if status['has_sufficient_data']:
                    st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")
                else:
                    st.sidebar.warning(f"‚ö†Ô∏è –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö (–º–∏–Ω–∏–º—É–º 50, —Å–µ–π—á–∞—Å {status['dataset_size']})")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
                try:
                    from data_loader import load_dataset
                    dataset = load_dataset()
                    if dataset:
                        last_group = dataset[-1]
                        st.sidebar.info(f"üìã –ü–æ—Å–ª–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞: {last_group}")
                except:
                    pass
                    
            except Exception as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        else:
            st.sidebar.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def show_advanced_controls(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã"""
        st.sidebar.header("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        
        if st.sidebar.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", key="refresh_status"):
            st.rerun()
        
        if st.sidebar.button("üìä –ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å", key="detailed_status"):
            try:
                status = self.system.get_status()
                st.sidebar.json(status, expanded=False)
            except Exception as e:
                st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

    def train_model(self):
        """–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"""
        st.header("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ AI")
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.info("""
            **–ü–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:**
            - –ê–Ω–∞–ª–∏–∑ 9000+ –≥—Ä—É–ø–ø —á–∏—Å–µ–ª
            - –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            - **–í—Ä–µ–º—è: 15-20 –º–∏–Ω—É—Ç**
            """)
        
        with col2:
            st.warning("""
            **‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:**
            –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è!
            –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –≤ —Ñ–æ–Ω–µ.
            """)
        
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", type="primary", key="train_full_btn"):
            with st.spinner("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–±—É—á–µ–Ω–∏—é..."):
                result = self.show_progress_with_timeout("training", timeout_seconds=1200)  # 20 –º–∏–Ω—É—Ç
            
            if self.thread_error:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {self.thread_error}")
                st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
            elif result:
                st.balloons()
                st.success("üéâ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                st.subheader("üéØ –ü–µ—Ä–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")
                for i, (group, score) in enumerate(result[:6], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 6 –ª—É—á—à–∏—Ö
                    confidence = "üü¢ –í–´–°–û–ö–ê–Ø" if score > 0.01 else "üü° –°–†–ï–î–ù–Ø–Ø" if score > 0.001 else "üî¥ –ù–ò–ó–ö–ê–Ø"
                    st.write(f"**{i}.** `{group[0]} {group[1]} {group[2]} {group[3]}`")
                    st.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: `{score:.6f}` {confidence}")
                    st.progress(min(1.0, score * 100))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                try:
                    from data_loader import save_predictions
                    save_predictions(result)
                    st.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
            else:
                st.warning("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")

    def make_prediction(self):
        """–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"""
        st.header("üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
        st.info("""
        **AI –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã:**
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        - –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∞–Ω—Å–∞–º–±–ª–µ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        - –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        - **–í—Ä–µ–º—è: 2-5 –º–∏–Ω—É—Ç**
        """)
        
        if st.button("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", type="primary", key="predict_btn"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞
            status = self.system.get_status()
            if not status['is_trained']:
                st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞! –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
                return
            
            with st.spinner("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞..."):
                result = self.show_progress_with_timeout("prediction", timeout_seconds=300)  # 5 –º–∏–Ω—É—Ç
            
            if self.thread_error:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {self.thread_error}")
            elif result:
                st.success(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(result)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
                
                st.subheader("üèÜ –¢–æ–ø –ø—Ä–æ–≥–Ω–æ–∑—ã")
                cols = st.columns(2)
                
                for i, (group, score) in enumerate(result):
                    with cols[i % 2]:
                        confidence = "üü¢ –í–´–°–û–ö–ê–Ø" if score > 0.01 else "üü° –°–†–ï–î–ù–Ø–Ø" if score > 0.001 else "üî¥ –ù–ò–ó–ö–ê–Ø"
                        
                        st.metric(
                            label=f"–ü—Ä–æ–≥–Ω–æ–∑ #{i+1}",
                            value=f"{group[0]} {group[1]} {group[2]} {group[3]}",
                            delta=f"{score:.4f} {confidence}"
                        )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                try:
                    from data_loader import save_predictions
                    save_predictions(result)
                    st.info("üíæ –ü—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –±—É–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
            else:
                st.warning("‚ö†Ô∏è –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    def add_sequence(self):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        try:
            from data_loader import load_dataset
            dataset = load_dataset()
            if dataset:
                st.info(f"üìã **–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞:** `{dataset[-1]}`")
        except:
            pass
        
        st.info("""
        **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã —Å –¥–æ–æ–±—É—á–µ–Ω–∏–µ–º:**
        - –í–≤–µ–¥–∏—Ç–µ 4 —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
        - –°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–∏—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        - –í—ã–ø–æ–ª–Ω–∏—Ç –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        - –°–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        - **–í—Ä–µ–º—è: 3-7 –º–∏–Ω—É—Ç**
        """)
        
        sequence_input = st.text_input(
            "–ß–∏—Å–ª–æ–≤–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:",
            placeholder="1 9 22 19",
            key="sequence_input",
            help="–ü—Ä–∏–º–µ—Ä: 1 9 22 19 - 4 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –æ—Ç 1 –¥–æ 26"
        )
        
        if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏ –¥–æ–æ–±—É—á–∏—Ç—å", type="primary", key="add_sequence_btn"):
            if not sequence_input:
                st.error("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
                return
                
            try:
                from data_loader import validate_group, compare_groups, load_predictions
                
                if not validate_group(sequence_input):
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —á–∏—Å–ª–∞ 1-26 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, —á–∏—Å–ª–∞ –≤ –ø–∞—Ä–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                st.session_state.current_sequence = sequence_input
                
                # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
                sequence_numbers = [int(x) for x in sequence_input.strip().split()]
                sequence_tuple = tuple(sequence_numbers)
                previous_predictions = load_predictions()
                
                if previous_predictions:
                    matches_found = []
                    for pred_group, score in previous_predictions:
                        comparison = compare_groups(pred_group, sequence_tuple)
                        if comparison['total_matches'] > 0:
                            matches_found.append((pred_group, comparison))
                    
                    if matches_found:
                        st.success(f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å {len(matches_found)} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏:")
                        for i, (pred_group, comparison) in enumerate(matches_found[:3], 1):
                            st.write(f"**{i}.** –ü—Ä–æ–≥–Ω–æ–∑: `{pred_group[0]} {pred_group[1]} {pred_group[2]} {pred_group[3]}`")
                            st.write(f"   - –°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–º: **{comparison['total_matches']}/4**")
                            st.write(f"   - –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: **{comparison['exact_matches']}/4**")
                    else:
                        st.info("üìù –°–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –Ω–µ—Ç")
                else:
                    st.info("üìù –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
                
                st.markdown("---")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                with st.spinner("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏..."):
                    result = self.show_progress_with_timeout("add_data", timeout_seconds=420)  # 7 –º–∏–Ω—É—Ç
                
                if self.thread_error:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {self.thread_error}")
                elif result:
                    st.balloons()
                    st.success("üéâ –ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –º–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞!")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
                    try:
                        from data_loader import save_predictions
                        save_predictions(result)
                        st.info("üíæ –ù–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã: {e}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
                    st.subheader("üéØ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
                    for i, (group, score) in enumerate(result[:8], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 8 –ª—É—á—à–∏—Ö
                        confidence = "üü¢ –í–´–°–û–ö–ê–Ø" if score > 0.01 else "üü° –°–†–ï–î–ù–Ø–Ø" if score > 0.001 else "üî¥ –ù–ò–ó–ö–ê–Ø"
                        st.write(f"**{i}.** `{group[0]} {group[1]} {group[2]} {group[3]}`")
                        st.write(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: `{score:.6f}` {confidence}")
                else:
                    st.warning("‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –Ω–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    st.title("üî¢ AI –ü—Ä–æ–≥–Ω–æ–∑ –ß–∏—Å–ª–æ–≤—ã—Ö –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    st.markdown("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Å **—Å–∏—Å—Ç–µ–º–æ–π —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è**")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    interface = WebInterface()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –º–µ–Ω—é
    interface.show_status()
    interface.show_advanced_controls()
    
    st.sidebar.markdown("---")
    st.sidebar.header("üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    menu_option = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É"],
        key="main_menu"
    )
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if menu_option == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
        st.header("üìä –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∫–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–≥–¥–∞ —Å–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç
        st.info("üìà –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ... –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        
    elif menu_option == "–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å":
        interface.train_model()
    elif menu_option == "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã":
        interface.make_prediction()
    elif menu_option == "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É":
        interface.add_sequence()

if __name__ == "__main__":
    main()